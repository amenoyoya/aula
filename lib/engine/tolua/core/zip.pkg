namespace Aula{
    struct ZipGlobalInformation{
        u32 entries,
            commentSize;
        string comment;
        
        ZipGlobalInformation(){}
    };
    
    struct ZipFileInformation{
        u32 version,
            neededVersion,
            flag,
            compressionMethod,
            dosDate,
            crc,
            compressedSize,
            uncompressedSize,
            fileNameSize,
            fileExtraSize,
            fileCommentSize,
            diskNumStart,
            internalFA,
            externalFA;
        struct _DateTime{
            u32 sec, min, hour, day, month, year;
        }date;
        string fileName, comment;
        
        ZipFileInformation(){}
    };
    
    class ZipArchiver: public Object {
    public:
        ZipArchiver();
        explicit ZipArchiver(const char *filename, const char *type="w");
        ~ZipArchiver();
        
        bool open(const char *filename, const char *type="w");
        bool close(const char *comment="");
        
        bool appendFile(const char *destFileName, const char *srcFileName,
            const char *password="", u8 level=6, const char *comment="");
        
        bool getGlobalInformation(ZipGlobalInformation *info) const;
        const u32 &getSize() const;
        
        bool toFirstFile();
        bool toNextFile();
        bool locateFile(const char *filename);
        bool getCurrentFileInformation(ZipFileInformation *info) const;
        u32 getCurrentOffset() const;
        
        bool openCurrentFile(const char *password="");
        bool closeCurrentFile();
        u32 getCurrentFilePosition() const;
    };
    
    bool removeZipData(const char *filename);
    bool compressDirectory(const char *dirPath, const char *outputFile,
        const char *key="", u8 level=6, const char *mode="w", const char *rootDir="");
    bool uncompressDirectory(const char *zipFile, const char *dirPath, const char *key="");
    
    class ZipFileReader: public Object {
    public:
        ZipFileReader();
        explicit ZipFileReader(const char *arcname, const char *filename, const char *password="");
        ~ZipFileReader();
        
        void setPassword(const char *pass);
        
        bool open(const char *arcname, const char *filename);
        void close();
        
        u32 getSize();
        string readLine();
        i8 readChar();
        string readAll();
        bool seek(s32 move, u8 from=SEEK_SET);
        u32 getPosition();
    };
    
    class FileReader: public Object {
    public:
        FileReader();
        explicit FileReader(const char *filename, const char *ext="", const char *password="");
        ~FileReader();
        
        void setDefaultArchive(const char *path, const char *key);
        void setDefaultArchive(const FileReader *file);
        bool open(const char *filename, const char *ext="", const char *password="");
        bool openFile(const char *filename);
        bool openFileInZip(const char *arcname, const char *filename, const char *password="");
        
        void close();
        
        string getCurrentFilePath() const;
        u32 getSize();
        string readLine();
        i8 readChar();
        string readAll();
        bool seek(s32 move, u8 from=SEEK_SET);
        u32 getPosition();
    };
}
